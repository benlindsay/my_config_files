function extract {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)        tar xjfv $1        ;;
            *.tar.gz)         tar xzfv $1        ;;
            *.bz2)            bunzip2 $1        ;;
            *.rar)            unrar x $1        ;;
            *.gz)             gunzip $1         ;;
            *.tar)            tar xfv $1         ;;
            *.tbz2)           tar xjfv $1        ;;
            *.tgz)            tar xzfv $1        ;;
            *.zip)            unzip $1          ;;
            *.Z)              uncompress $1     ;;
            *.7z)             7zr e $1          ;;
            *)                echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function jnlocal {
  cmd="ssh -Y -fN -L localhost:8888:localhost:8888 lindsb@rrlogin.seas.upenn.edu"
  running_cmds=$(ps aux | grep -v grep | grep "$cmd")
  if [[ "$1" == 'kill' ]]; then
    if [ ! -z $running_cmds ]; then
      for pid in $(echo $running_cmds | awk '{print $2}'); do
        echo "killing pid $pid"
        kill -9 $pid
      done
    else
      echo "No jnlocal commands to kill."
    fi
  else
    if [ ! -z $n_running_cmds ]; then
      echo "jnlocal command is still running. Kill with 'jnlocal kill' next time."
    else
      echo "Running command '$cmd'"
      eval "$cmd"
    fi
    url=$(ssh lindsb@rrlogin.seas.upenn.edu \
            '~/usr/anaconda/bin/jupyter notebook list' \
            | grep http | awk '{print $1}')
    echo "URL that will open in your browser:"
    echo "$url"
    open "$url"
  fi
}

function mount_rrlogin {
  umount ~/rrlogin
  sshfs lindsb@rrlogin.seas.upenn.edu:/home/lindsb ~/rrlogin -o volname=rrlogin
}

function mount_stamp {
  umount ~/stampede/home ~/stampede/work
  sshfs lindsb@stampede2.tacc.utexas.edu:/home1/03555/lindsb ~/stampede/home -o volname=home
  sshfs lindsb@stampede2.tacc.utexas.edu:/work/03555/lindsb/stampede2 ~/stampede/work -o volname=work
}

function mount_stamp_work {
  umount ~/stampede/work
  sshfs lindsb@stampede2.tacc.utexas.edu:/work/03555/lindsb/stampede2 ~/stampede/work -o volname=work
}

function mount_comet {
  umount ~/comet/home ~/comet/scratch
  sshfs lindsb@comet.sdsc.xsede.org:/home/lindsb ~/comet/home -o volname=home
  sshfs lindsb@comet.sdsc.xsede.org:/oasis/scratch/comet/lindsb/temp_project ~/comet/scratch -o volname=scratch
}

function mount_comet_scratch {
  umount ~/comet/scratch
  sshfs lindsb@comet.sdsc.xsede.org:/oasis/scratch/comet/lindsb/temp_project ~/comet/scratch -o volname=scratch
}

function mount_bridges {
  umount ~/bridges/home ~/bridges/scratch
  sshfs lindsb@bridges.psc.xsede.org:/home/lindsb ~/bridges/home -o volname=home
  sshfs lindsb@bridges.psc.xsede.org:/pylon5/mr5fpop/lindsb ~/bridges/scratch -o volname=scratch
}

function unmount_rrlogin {
  sudo diskutil unmount force ~/rrlogin
}

function unmount_stamp {
  sudo diskutil unmount force ~/stampede/home
  sudo diskutil unmount force ~/stampede/work
}

function unmount_comet {
  sudo diskutil unmount force ~/comet/home
  sudo diskutil unmount force ~/comet/scratch
}

function unmount_bridges {
  sudo diskutil unmount force ~/bridges/home
  sudo diskutil unmount force ~/bridges/scratch
}

function unmount_all {
  unmount_rrlogin
  unmount_stamp
  unmount_comet
  unmount_bridges
}

function passtail {
  pass -c $1
  pass tail $1
}

function passgen {

  capitalize=true
  add_special=true
  n_words=3
  re='^[0-9]+$'
  for arg in $@; do
    if [ "$arg" = '--nocap' ]; then
      capitalize=false
    elif [ "$arg" = '--nospecial' ]; then
      add_special=false
    elif [[ "$arg" =~ "$re" ]] ; then
      n_words="$arg"
    fi
  done

  SPECIAL_ARRAY=('!' '@' '#' '$' '%' '^' '&' '*')
  first=true

  for word in $(gshuf -n$n_words /usr/share/dict/words); do
    if $capitalize; then
      next_word=$(echo $word | awk '{print toupper(substr($0,1,1))""substr($0,2)}')
    else
      next_word="$word"
    fi
    if $first; then
      password="$next_word"
      first=false
    else
      if $add_special; then
        rand=$(( (RANDOM % 8) + 1 ))
        rand_special="${SPECIAL_ARRAY[$rand]}"
        password="$password$rand_special$next_word"
      else
        password="$password$next_word"
      fi
    fi
  done

  echo "$password"

}

function macmount {
  sshfs -o volname=$2 $1 $2
}

# "round" was modified from
# http://stempell.com/2009/08/rechnen-in-bash/
# It allows you to evaluate and round math expressions with
# floating point numbers
function round {
  # Make sure only 1 or 2 variables passed
  if [ "$#" -gt 2 ] || [ "$#" == 0 ] ; then
    echo 'Usage: round "expr" scale. Default scale is 0'
    return 1
  elif [ "$#" == 1 ] ; then
    # If no scale was passed, set scale to 0
    set -- "${@:1}" "0"
  fi

  # Make sure scale >= 0
  if [ "$2" -lt 0 ] ; then
    echo "Scale must be >= 0"
    return 1
  fi

  # Evaluate
  if [ "$2" == 0 ] ; then
    echo $(printf %.0f $(echo "scale=0;($1+0.5)/1" | bc))
  else
    echo $(printf %.$2f $(echo "scale=$2;(((10^$2)*($1))+0.5)/(10^$2)" | bc))
  fi
}

# Shortcut for executing a command within each subdirectory
function all {
  for d in */; do
    cd $d
    ("$1")
    cd -
  done
}

# Changes all files in current directory of the form w*.all to w*.res
function w_all_to_res {
  for f in w*.all; do
    mv $f ${f%.all}.res
  done
}
